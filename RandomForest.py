"""
    RandomForest Classifier
    --please specify the path of features pickle (generated by features_generator.py)
"""

import os
import pandas as pd
import numpy as np
from sklearn.model_selection import GroupKFold, StratifiedShuffleSplit
from sklearn.metrics import confusion_matrix, accuracy_score, f1_score
from sklearn.feature_selection import VarianceThreshold
from sklearn.ensemble import RandomForestClassifier
from functions import get_config, load_dataset


# params
features_pickle_path = 'Processed/features_w96.pkl'
cfg_path = 'RandomForest_PAMAP2.yaml'
result_dir = 'Results'
loso = True
n_splits = 5  # 5-Fold

# --------------load cfg & data file--------------
cfg = get_config(cfg_path)
data_x, data_y, data_group = load_dataset(features_pickle_path)

# --------------sample feature select--------------
sel = VarianceThreshold(threshold=0.01)
data_x = sel.fit_transform(data_x)
print(f'used instances: {data_x.shape[0]}, used features: {data_x.shape[1]}')
# --------------no cross subject test--------------
if not loso:
    sss = StratifiedShuffleSplit(n_splits=n_splits, train_size=0.8, random_state=725)
    k = 0

    test_acc = []
    test_f1 = []

    for train_index, test_index in sss.split(data_x, data_y):
        k = k + 1
        print('-'*20, k, '-'*20)

        clf = RandomForestClassifier(**cfg['model'])

        x_train, x_test = data_x[train_index], data_x[test_index]
        y_train, y_test = data_y[train_index], data_y[test_index]

        model = clf.fit(x_train, y_train)

        pred = clf.predict(x_test)

        test_acc.append(accuracy_score(y_test, pred))
        test_f1.append(f1_score(y_test, pred, average='weighted'))
        cm = confusion_matrix(y_test, pred, labels=np.arange(cfg['dataset']['activities']))
        np.savetxt(os.path.join(result_dir, f'confusion_matrix_{k}.txt'), cm)
        print('Acc: %5.2f  F1-score: %5.2f' % (test_acc[-1], test_f1[-1]))

    print('Mean Acc: %5.3f  Mean F1-score: %5.3f' % (np.mean(test_acc), np.mean(test_f1)))
    df = pd.DataFrame({'acc': test_acc, 'f1': test_f1})
    df.to_csv(os.path.join(result_dir, 'results_no_cross.csv'))

else:

    gkf = GroupKFold(n_splits=cfg['dataset']['subjects'])

    test_acc = []
    test_f1 = []
    test_groups = []

    for train_index, test_index in gkf.split(data_x, data_y, data_group):

        clf = RandomForestClassifier(**cfg['model'])

        x_train, x_test = data_x[train_index], data_x[test_index]
        y_train, y_test = data_y[train_index], data_y[test_index]
        g_train, g_test = data_group[train_index], data_group[test_index]

        train_groups = list(set(g_train))
        test_group = list(set(g_test))[0]
        print(f'train_groups: {train_groups}...')
        print(f'test_groups: {test_group}...')

        model = clf.fit(x_train, y_train)

        pred = clf.predict(x_test)

        test_groups.append(test_group)
        test_acc.append(accuracy_score(y_test, pred))
        test_f1.append(f1_score(y_test, pred, average='weighted'))
        cm = confusion_matrix(y_test, pred, labels=np.arange(cfg['dataset']['activities']))
        np.savetxt(os.path.join(result_dir, f'confusion_matrix_cross{test_group}.txt'), cm)
        print('Acc: %5.2f  F1-score: %5.2f' % (test_acc[-1], test_f1[-1]))

    test_groups.append(cfg['dataset']['subjects'] + 1)
    test_acc.append(np.mean(test_acc))
    test_f1.append(np.mean(test_f1))
    df = pd.DataFrame({'subject': test_groups, 'acc': test_acc, 'f1': test_f1}). \
        sort_values('subject', ascending=True).reset_index()
    df.to_csv(os.path.join(result_dir, 'results_cross.csv'))

    print('Mean Acc: %5.3f  Mean F1-score: %5.3f' % (test_acc[-1], test_f1[-1]))
