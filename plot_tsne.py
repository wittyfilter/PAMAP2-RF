"""
    plot the t-SNE figure
    --please specify the path of features pickle (generated by features_generator.py)
"""

import numpy as np
import os
import palettable.tableau as tab
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from functions import load_dataset
from sklearn.feature_selection import VarianceThreshold


class FeatureVisualize(object):
    """
    Visualize features by TSNE
    """
    def __init__(self, features, labels, activity):
        """
            features: (m,n), labels: (m,)
        """
        self.features = features
        self.labels = labels
        self.activity = activity

    def plot_tsne_scatter(self, path):
        tsne = TSNE(n_components=2, init='pca', random_state=0)
        features = tsne.fit_transform(self.features)
        x_min, x_max = np.min(features, 0), np.max(features, 0)
        data = (features - x_min) / (x_max - x_min)
        del features

        plt.rc('font', family='Times New Roman', size=8)

        scatters = []
        activities = []
        colors = tab.Tableau_20.mpl_colors[0::2]
        colors.append((0, 0, 0))
        colors.append((0.949, 0.745, 0.27))

        for i, v in enumerate(self.activity):
            temp = data[self.labels == v - 1]
            s = plt.scatter(temp[:, 0], temp[:, 1], marker='.', color=colors[i], s=1)
            scatters.append(s)
            activities.append(f'A{v}')

        plt.legend(scatters, activities, loc='lower left')
        plt.xticks([])
        plt.yticks([])
        plt.savefig(path, dpi=600, pad_inches=0.1, bbox_inches='tight')
        plt.close()


if __name__ == '__main__':

    features_pickle_path = 'Processed/features_w96.pkl'
    result_dir = 'Results'
    n_activities = 12

    data_x, data_y, data_groups = load_dataset(features_pickle_path)
    activity_name = [i for i in range(1, n_activities + 1)]

    sel = VarianceThreshold(threshold=0.01)
    data_x = sel.fit_transform(data_x)

    mean = np.mean(data_x, axis=0)
    std = np.std(data_x, axis=0)
    data_x = (data_x - mean) / std

    vis = FeatureVisualize(data_x, data_y, activity_name)
    vis.plot_tsne_scatter(os.path.join(result_dir, 't-SNE.pdf'))


